/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c OutputManagement -p generated/outputmanagement ../xml/OutputManagement.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef OUTPUTMANAGEMENT_H
#define OUTPUTMANAGEMENT_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>


/*
 * Proxy class for interface org.deepin.dde.KWayland1.Output
 */
class __OutputManagementPrivate;
class __OutputManagement : public DBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "org.deepin.dde.KWayland1.Output"; }

public:
    explicit __OutputManagement(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~__OutputManagement();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Apply(const QString &outputs)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(outputs);
        return asyncCallWithArgumentList(QStringLiteral("Apply"), argumentList);
    }

    inline void ApplyQueued(const QString &outputs)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(outputs);

        CallQueued(QStringLiteral("Apply"), argumentList);
    }


    inline QDBusPendingReply<QString> GetOutput(const QString &uuid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uuid);
        return asyncCallWithArgumentList(QStringLiteral("GetOutput"), argumentList);
    }



    inline QDBusPendingReply<QString> ListOutput()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ListOutput"), argumentList);
    }



    inline QDBusPendingReply<> WlSimulateKey(int state)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(state);
        return asyncCallWithArgumentList(QStringLiteral("WlSimulateKey"), argumentList);
    }

    inline void WlSimulateKeyQueued(int state)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(state);

        CallQueued(QStringLiteral("WlSimulateKey"), argumentList);
    }



Q_SIGNALS: // SIGNALS
    void OutputAdded(const QString &output);
    void OutputChanged(const QString &output);
    void OutputRemoved(const QString &output);
    // begin property changed signals

public Q_SLOTS:
    void CallQueued(const QString &callName, const QList<QVariant> &args);

private Q_SLOTS:
    void onPendingCallFinished(QDBusPendingCallWatcher *w);

private:
    __OutputManagementPrivate *d_ptr;
};

namespace com {
  namespace deepin {
    namespace dde {
      namespace kwayland1 {
        typedef ::__OutputManagement Output;
      }
    }
  }
}
#endif
