/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c BamfApplication -p BamfApplication Application.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef BAMFAPPLICATION_H
#define BAMFAPPLICATION_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>


/*
 * Proxy class for interface org.ayatana.bamf.application
 */
class __BamfApplicationPrivate;
class __BamfApplication : public DBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "org.ayatana.bamf.application"; }

public:
    explicit __BamfApplication(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~__BamfApplication();

public Q_SLOTS: // METHODS
    inline Q_DECL_DEPRECATED QDBusPendingReply<QString, QString> ApplicationMenu()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ApplicationMenu"), argumentList);
    }


    inline Q_DECL_DEPRECATED QDBusReply<QString> ApplicationMenu(QString &objectpath)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("ApplicationMenu"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            objectpath = qdbus_cast<QString>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<QString> ApplicationType()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ApplicationType"), argumentList);
    }



    inline QDBusPendingReply<QString> DesktopFile()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("DesktopFile"), argumentList);
    }



    inline QDBusPendingReply<QString> FocusableChild()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("FocusableChild"), argumentList);
    }



    inline QDBusPendingReply<bool> ShowStubs()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ShowStubs"), argumentList);
    }



    inline QDBusPendingReply<QStringList> SupportedMimeTypes()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("SupportedMimeTypes"), argumentList);
    }



    inline QDBusPendingReply<QList<uint> > Xids()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Xids"), argumentList);
    }




Q_SIGNALS: // SIGNALS
    void DesktopFileUpdated(const QString &desktop_file);
    void SupportedMimeTypesChanged(const QStringList &dnd_mimes);
    Q_DECL_DEPRECATED void WindowAdded(const QString &path);
    Q_DECL_DEPRECATED void WindowRemoved(const QString &path);
    // begin property changed signals

public Q_SLOTS:
    void CallQueued(const QString &callName, const QList<QVariant> &args);

private Q_SLOTS:
    void onPendingCallFinished(QDBusPendingCallWatcher *w);

private:
    __BamfApplicationPrivate *d_ptr;
};

namespace org {
  namespace ayatana {
    namespace bamf {
      typedef ::__BamfApplication BamfApplication;
    }
  }
}
#endif
