/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c org_deepin_api_XEventMonitor -p /home/donghl/work/code/dde-dock/frame/dbusinterface/generation_dbus_interface/org_deepin_api_xeventmonitor /home/donghl/work/code/dde-dock/frame/dbusinterface/xml/org.deepin.api.XEventMonitor.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORG_DEEPIN_API_XEVENTMONITOR_H
#define ORG_DEEPIN_API_XEVENTMONITOR_H

#include "types/arealist.h"

#include <DBusExtendedAbstractInterface>

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.deepin.dde.XEventMonitor1
 */
class __org_deepin_dde_XEventMonitorPrivate;
class __org_deepin_dde_XEventMonitor : public DBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "org.deepin.dde.XEventMonitor1"; }

public:
    explicit __org_deepin_dde_XEventMonitor(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~__org_deepin_dde_XEventMonitor();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> RegisterArea(int in0, int in1, int in2, int in3, int in4)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2) << QVariant::fromValue(in3) << QVariant::fromValue(in4);
        return asyncCallWithArgumentList(QStringLiteral("RegisterArea"), argumentList);
    }

    inline QDBusPendingReply<QString> RegisterAreas(AreaList in0, int in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("RegisterAreas"), argumentList);
    }

    inline QDBusPendingReply<QString> RegisterFullScreen()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RegisterFullScreen"), argumentList);
    }

    inline QDBusPendingReply<bool> UnregisterArea(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("UnregisterArea"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ButtonPress(int in0, int in1, int in2, const QString &in3);
    void ButtonRelease(int in0, int in1, int in2, const QString &in3);
    void CancelAllArea();
    void CursorInto(int in0, int in1, const QString &in2);
    void CursorMove(int in0, int in1, const QString &in2);
    void CursorOut(int in0, int in1, const QString &in2);
    void KeyPress(const QString &in0, int in1, int in2, const QString &in3);
    void KeyRelease(const QString &in0, int in1, int in2, const QString &in3);
    // begin property changed signals

public Q_SLOTS:
    void CallQueued(const QString &callName, const QList<QVariant> &args);

private Q_SLOTS:
    void onPendingCallFinished(QDBusPendingCallWatcher *w);

private:
    __org_deepin_dde_XEventMonitorPrivate *d_ptr;
};

namespace org {
  namespace deepin {
    namespace dde {
      typedef ::__org_deepin_dde_XEventMonitor XEventMonitor1;
    }
  }
}

#endif
