/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c BamfMatcher -p BamfMatcher Matcher.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef BAMFMATCHER_H
#define BAMFMATCHER_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>


/*
 * Proxy class for interface org.ayatana.bamf.matcher
 */
class __BamfMatcherPrivate;
class __BamfMatcher : public DBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "org.ayatana.bamf.matcher"; }

public:
    explicit __BamfMatcher(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~__BamfMatcher();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> ActiveApplication()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ActiveApplication"), argumentList);
    }



    inline QDBusPendingReply<QString> ActiveWindow()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ActiveWindow"), argumentList);
    }



    inline QDBusPendingReply<QString> ApplicationForXid(uint xid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(xid);
        return asyncCallWithArgumentList(QStringLiteral("ApplicationForXid"), argumentList);
    }



    inline QDBusPendingReply<bool> ApplicationIsRunning(const QString &desktop_file)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(desktop_file);
        return asyncCallWithArgumentList(QStringLiteral("ApplicationIsRunning"), argumentList);
    }



    inline QDBusPendingReply<QStringList> ApplicationPaths()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ApplicationPaths"), argumentList);
    }



    inline QDBusPendingReply<QString> PathForApplication(const QString &desktop_file)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(desktop_file);
        return asyncCallWithArgumentList(QStringLiteral("PathForApplication"), argumentList);
    }



    inline QDBusPendingReply<> RegisterFavorites(const QStringList &favorites)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(favorites);
        return asyncCallWithArgumentList(QStringLiteral("RegisterFavorites"), argumentList);
    }

    inline void RegisterFavoritesQueued(const QStringList &favorites)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(favorites);

        CallQueued(QStringLiteral("RegisterFavorites"), argumentList);
    }


    inline QDBusPendingReply<QStringList> RunningApplications()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RunningApplications"), argumentList);
    }



    inline QDBusPendingReply<QStringList> RunningApplicationsDesktopFiles()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RunningApplicationsDesktopFiles"), argumentList);
    }



    inline QDBusPendingReply<QStringList> TabPaths()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("TabPaths"), argumentList);
    }



    inline QDBusPendingReply<QStringList> WindowPaths()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("WindowPaths"), argumentList);
    }



    inline QDBusPendingReply<QStringList> WindowStackForMonitor(int monitor_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(monitor_id);
        return asyncCallWithArgumentList(QStringLiteral("WindowStackForMonitor"), argumentList);
    }



    inline QDBusPendingReply<QList<uint> > XidsForApplication(const QString &desktop_file)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(desktop_file);
        return asyncCallWithArgumentList(QStringLiteral("XidsForApplication"), argumentList);
    }




Q_SIGNALS: // SIGNALS
    void ActiveApplicationChanged(const QString &old_app, const QString &new_app);
    void ActiveWindowChanged(const QString &old_win, const QString &new_win);
    void RunningApplicationsChanged(const QStringList &opened_desktop_files, const QStringList &closed_desktop_files);
    void StackingOrderChanged();
    void ViewClosed(const QString &path, const QString &type);
    void ViewOpened(const QString &path, const QString &type);
    // begin property changed signals

public Q_SLOTS:
    void CallQueued(const QString &callName, const QList<QVariant> &args);

private Q_SLOTS:
    void onPendingCallFinished(QDBusPendingCallWatcher *w);

private:
    __BamfMatcherPrivate *d_ptr;
};

namespace org {
  namespace ayatana {
    namespace bamf {
      typedef ::__BamfMatcher BamfMatcher;
    }
  }
}
#endif
