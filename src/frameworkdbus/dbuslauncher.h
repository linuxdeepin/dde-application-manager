/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c Launcherd -p generated/com_deepin_dde_daemon_launcher1 ../xml/org.deepin.dde.daemon.Launcher1.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORG_DEEPIN_DDE_DAEMON_LAUNCHER1_H
#define ORG_DEEPIN_DDE_DAEMON_LAUNCHER1_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>

#include "types/launcheriteminfo.h"
#include "types/launcheriteminfolist.h"

/*
 * Proxy class for interface org.deepin.dde.daemon.Launcher1
 */
class __LauncherdPrivate;
class LauncherBackEnd : public DBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "org.deepin.dde.daemon.Launcher1"; }

public:
    explicit LauncherBackEnd(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~LauncherBackEnd();

    Q_PROPERTY(int DisplayMode READ displayMode WRITE setDisplayMode NOTIFY DisplayModeChanged)
    int displayMode();
    void setDisplayMode(int value);

    Q_PROPERTY(bool Fullscreen READ fullscreen WRITE setFullscreen NOTIFY FullscreenChanged)
    bool fullscreen();
    void setFullscreen(bool value);

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<LauncherItemInfoList> GetAllItemInfos()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetAllItemInfos"), argumentList);
    }



    inline QDBusPendingReply<QStringList> GetAllNewInstalledApps()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetAllNewInstalledApps"), argumentList);
    }



    inline QDBusPendingReply<bool> GetDisableScaling(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QStringLiteral("GetDisableScaling"), argumentList);
    }



    inline QDBusPendingReply<LauncherItemInfo> GetItemInfo(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QStringLiteral("GetItemInfo"), argumentList);
    }



    inline QDBusPendingReply<bool> GetUseProxy(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QStringLiteral("GetUseProxy"), argumentList);
    }



    inline QDBusPendingReply<bool> IsItemOnDesktop(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QStringLiteral("IsItemOnDesktop"), argumentList);
    }



    inline QDBusPendingReply<> MarkLaunched(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QStringLiteral("MarkLaunched"), argumentList);
    }

    inline void MarkLaunchedQueued(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);

        CallQueued(QStringLiteral("MarkLaunched"), argumentList);
    }


    inline QDBusPendingReply<bool> RequestRemoveFromDesktop(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QStringLiteral("RequestRemoveFromDesktop"), argumentList);
    }



    inline QDBusPendingReply<bool> RequestSendToDesktop(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QStringLiteral("RequestSendToDesktop"), argumentList);
    }



    inline QDBusPendingReply<> RequestUninstall(const QString &id, bool purge)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(purge);
        return asyncCallWithArgumentList(QStringLiteral("RequestUninstall"), argumentList);
    }

    inline void RequestUninstallQueued(const QString &id, bool purge)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(purge);

        CallQueued(QStringLiteral("RequestUninstall"), argumentList);
    }


    inline QDBusPendingReply<> Search(const QString &key)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key);
        return asyncCallWithArgumentList(QStringLiteral("Search"), argumentList);
    }

    inline void SearchQueued(const QString &key)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key);

        CallQueued(QStringLiteral("Search"), argumentList);
    }


    inline QDBusPendingReply<> SetDisableScaling(const QString &id, bool value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QStringLiteral("SetDisableScaling"), argumentList);
    }

    inline void SetDisableScalingQueued(const QString &id, bool value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(value);

        CallQueued(QStringLiteral("SetDisableScaling"), argumentList);
    }


    inline QDBusPendingReply<> SetUseProxy(const QString &id, bool value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QStringLiteral("SetUseProxy"), argumentList);
    }

    inline void SetUseProxyQueued(const QString &id, bool value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(value);

        CallQueued(QStringLiteral("SetUseProxy"), argumentList);
    }



Q_SIGNALS: // SIGNALS
    void ItemChanged(const QString &status, LauncherItemInfo itemInfo, qlonglong categoryID);
    void NewAppLaunched(const QString &appID);
    void SearchDone(const QStringList &apps);
    void UninstallFailed(const QString &appId, const QString &errMsg);
    void UninstallSuccess(const QString &appID);
    // begin property changed signals
    void DisplayModeChanged(int  value) const;
    void FullscreenChanged(bool  value) const;

public Q_SLOTS:
    void CallQueued(const QString &callName, const QList<QVariant> &args);

private Q_SLOTS:
    void onPendingCallFinished(QDBusPendingCallWatcher *w);
    void onPropertyChanged(const QString &propName, const QVariant &value);

private:
    __LauncherdPrivate *d_ptr;
};

namespace org {
  namespace deepin {
    namespace dde {
      namespace daemon {
        typedef ::LauncherBackEnd LauncherBackEnd;
      }
    }
  }
}
#endif
